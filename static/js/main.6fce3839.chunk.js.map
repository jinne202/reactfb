{"version":3,"sources":["logo.svg","firebase.js","Register.js","SaveData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Register","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addUser","data","objectSpread","state","formValues","uid","Date","getTime","collection","doc","toString","set","then","NotificationManager","success","window","location","catch","error","message","setState","isSubmitting","handleSubmit","event","preventDefault","_this$state","formValidity","values","every","Boolean","key","target","name","value","handleValidation","handleChange","_ref","fieldValidationErrors","formErrors","validity","length","concat","role","_this$state2","react_default","a","createElement","Fragment","className","onSubmit","type","placeholder","onChange","disabled","React","Component","SaveData","users","_this2","get","querySnapshot","docs","map","console","log","user","App","src_Register","src_SaveData","src","logo","alt","href","rel","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fce3839.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  // copy and paste your firebase credential here\r\n  apiKey: \"AIzaSyCo5fV6tRvhkxaHVMEiRuc3GDAALutexHw\",\r\n  authDomain: \"pagebook-688d8.firebaseapp.com\",\r\n  databaseURL: \"https://pagebook-688d8.firebaseio.com\",\r\n  projectId: \"pagebook-688d8\",\r\n  storageBucket: \"pagebook-688d8.appspot.com\",\r\n  messagingSenderId: \"278198920030\",\r\n  appId: \"1:278198920030:web:057613a85867e7a6\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport {db};","import React from \"react\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { db } from \"./firebase\";\r\n\r\nclass Register extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      formValues: {\r\n        name: \"\",\r\n        role: \"\"\r\n      },\r\n      formErrors: {\r\n        name: \"\",\r\n        role: \"\"\r\n      },\r\n      formValidity: {\r\n        name: false,\r\n        role: false\r\n      },\r\n      isSubmitting: false\r\n    };\r\n  }\r\n\r\n  addUser = () => {\r\n    const data = {\r\n      ...this.state.formValues,\r\n      uid: new Date().getTime()\r\n    };\r\n    db.collection(\"users\")\r\n      .doc(data.uid.toString())\r\n      .set(data)\r\n      .then(() => {\r\n        NotificationManager.success(\"A new user has been added\", \"Success\");\r\n        window.location = \"/\";\r\n      })\r\n      .catch(error => {\r\n        NotificationManager.error(error.message, \"Create user failed\");\r\n        this.setState({ isSubmitting: false });\r\n      });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.setState({ isSubmitting: true });\r\n    const { formValues, formValidity } = this.state;\r\n    if (Object.values(formValidity).every(Boolean)) {\r\n      this.addUser();\r\n    } else {\r\n      for (let key in formValues) {\r\n        let target = {\r\n          name: key,\r\n          value: formValues[key]\r\n        };\r\n        this.handleValidation(target);\r\n      }\r\n      NotificationManager.error(\r\n        \"Please check on the validation message below form fields\",\r\n        \"Validation error\"\r\n      );\r\n      this.setState({ isSubmitting: false });\r\n    }\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { formValues } = this.state;\r\n    formValues[target.name] = target.value;\r\n    this.setState({ formValues });\r\n    this.handleValidation(target);\r\n  };\r\n\r\n  handleValidation = target => {\r\n    const { name, value } = target;\r\n    const fieldValidationErrors = this.state.formErrors;\r\n    const validity = this.state.formValidity;\r\n    const isImage = name === \"image\";\r\n\r\n    if (!isImage) {\r\n      validity[name] = value.length > 0;\r\n      fieldValidationErrors[name] = validity[name]\r\n        ? \"\"\r\n        : `${name} is required and cannot be empty`;\r\n    }\r\n\r\n    this.setState({\r\n      formErrors: fieldValidationErrors,\r\n      formValidity: validity\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { formValues, formErrors, isSubmitting } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"row mb-5\">\r\n          <div className=\"col-lg-12 text-center\">\r\n            <h1 className=\"mt-5\">Register New Person</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label>Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  className={`form-control ${\r\n                    formErrors.name ? \"is-invalid\" : \"\"\r\n                  }`}\r\n                  placeholder=\"Enter name\"\r\n                  onChange={this.handleChange}\r\n                  value={formValues.name}\r\n                />\r\n                <div className=\"invalid-feedback\">{formErrors.name}</div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Role</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"role\"\r\n                  className={`form-control ${\r\n                    formErrors.role ? \"is-invalid\" : \"\"\r\n                  }`}\r\n                  placeholder=\"Enter role\"\r\n                  onChange={this.handleChange}\r\n                  value={formValues.role}\r\n                />\r\n                <div className=\"invalid-feedback\">{formErrors.role}</div>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block\"\r\n                disabled={isSubmitting}\r\n              >\r\n                {isSubmitting ? \"Please wait...\" : \"Submit\"}\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;","import { db } from \"./firebase\";\r\nimport React from \"react\";\r\n\r\n\r\nclass SaveData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      users: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    db.collection(\"users\")\r\n      .get()\r\n      .then(querySnapshot => {\r\n        const data = querySnapshot.docs.map(doc => doc.data());\r\n        console.log(data);\r\n        this.setState({ users: data });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { users } = this.state;\r\n    return (\r\n      <div className=\"row\">\r\n        {users.map(user => (\r\n          <div key={user.uid} className=\"col-lg-6 col-md-6 col-s-12 mb-4\">\r\n            <div className=\"card h-100\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h5>{user.name}</h5>\r\n                  <h6>{user.role}</h6>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveData;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Register from './Register';\nimport SaveData from './SaveData';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Register/>\n      <SaveData/>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}